var App = function(elm, opts) {

    /**
     * @var {Config}
     */
    this.config = null;
    /**
     * @var jQuery
     */
    this.elm = null;

    /**
     * @var ManagerScreen
     */
    this.managerScreen = null;
    /**
     * @type ManagerScenario
     */
    this.managerScenario = null;

    /**
     * @param elm
     * @param opts
     * @returns {App}
     */
    this.init = function(elm, opts) {
        this.elm = elm;
        this.config = new Config(opts);
        this.managerScreen = new ManagerScreen(this.elm, this.config);
        this.managerScenario = new ManagerScenario(this.managerScreen);
        return this;
    };
    /**
     * @returns {App}
     */
    this.start = function () {
        this.managerScreen.redraw();
        this.managerScenario.start();
        return this;
    };
    /**
     * @param data
     * @returns {App}
     */
    this.load = function (data) {
        this.managerScreen.load(data);
        return this;
    };
    /**
     * @returns {ManagerScenario}
     */
    this.getScenario = function () {
        return this.managerScenario;
    };
    /**
     * @returns {ManagerScreen}
     */
    this.getManagerScreen = function () {
        return this.managerScreen;
    };

    return this.init(elm, opts);
};
var Config = function(opts) {

    this.options = {
        nbLines:  21,
        color: {
            brown: '#232525',
            yellow: '#e4c66d',
            orange: '#cc7832',
            red: '#BC3F3C',
            green: '#6a8759',
            blue: '#598dbb',
            purple: '#9876aa',
            white: '#a9b7c6'
        }
    };

    this.options = $.extend(true, this.options, opts);
    return this;
};
var Tools = {
    /**
     * @param n
     * @param p
     * @param c
     * @returns {string}
     */
    lpad: function(n, p, c) {
        var pad_char = typeof c !== 'undefined' ? c : '0';
        var pad = new Array(1 + p).join(pad_char);
        return (pad + n).slice(-pad.length);
    },
    /**
     * @param n
     * @param p
     * @param c
     * @returns {string}
     */
    rpad: function(n, p, c) {
        var pad_char = typeof c !== 'undefined' ? c : '0';
        var pad = new Array(1 + p).join(pad_char);
        return (n+pad).slice(0, -n.length);
    },
    /**
     * @param str
     * @returns {ManagerScreen|XML|string|void}
     */
    strip_tag: function(str) {
        return str.replace(/(<([^>]+)>)/ig,"");
    }
}
var ManagerScenario = function(managerScreen) {

    /**
     * @var ManagerScreen
     */
    this.managerScreen = managerScreen;

    /**
     * @type {ModelScenario}
     */
    this.scenario = new ModelScenario();

    /**
     * @returns {ManagerScenario}
     */
    this.init = function() {
        return this;
    };

    /**
     * @returns {ManagerScenario}
     */
    this.start = function () {
        var actions = this.scenario.getActions();

        for (var i = 0; i < actions.length; i++) {
            var action = actions[i];
            action(this.managerScreen);
        }
        return this;
    };

    /**
     * @param func
     * @returns {ManagerScenario}
     */
    this.add = function(func) {
        this.scenario.addAction(func);
        return this;
    };

    return this.init();
};
var ManagerScreen = function(elm, config) {

    /**
     * @var ModelScreen
     */
    this.screen = null;
    /**
     * @var jQuery
     */
    this.elm = elm;
    /**
     * @var {Config}
     */
    this.config = config;

    /**
     * @var UiGraphicScreen
     */
    this.uiScreen = null;

    /**
     * @var UiGraphicLine[]
     */
    this.uiLines = [];

    /**
     * @returns {ManagerScreen}
     */
    this.init = function() {
        return this;
    };

    /**
     * @param data
     * @returns {ManagerScreen}
     */
    this.load = function(data) {
        this.screen = new ModelScreen();
        for (var i = 0; i < data.length; i++) {
            var content = data[i];

            var line = new ModelLine();
            line.setContent(content);
            this.screen.addLine(line);
        }
        return this;
    };

    /**
     * @returns {ManagerScreen}
     */
    this.redraw = function() {
        this.elm.empty();
        this.uiScreen = new UiGraphicScreen(this.elm, this.config);
        var lines = this.screen.getLines();

        for (var i = 0; i < lines.length; i++) {
            this.redrawLine(i);
        }
        return this;
    };
    /**
     * @param index
     * @returns {UiGraphicLine}
     */
    this.getUiGraphicLine = function (index) {
        return this.uiLines[index];
    };
    /**
     * @param index
     * @returns {ModelLine}
     */
    this.getLine = function (index) {
        return this.screen.getLines()[index];
    };
    /**
     * @param index
     * @returns {ManagerScreen}
     */
    this.redrawLine = function(index) {
        var line = this.getLine(index);
        var ui = new UiGraphicLine(line);
        this.uiLines[index] = ui;

        var div = this.elm.find('div');
        if (div.length === this.screen.getLines().length) {
            div.eq(index).after(ui.getElm());
            div.eq(index).remove();
        } else {
            this.elm.append(ui.getElm());
        }
        return this;
    };

    /**
     * @param index
     * @param content
     * @returns {ManagerScreen}
     */
    this.write = function(index, content) {
        var line = this.getLine(index);
        line.setContent(content);
        this.redrawLine(index);
        return this;
    };
    /**
     * @param index
     * @param search
     * @param value
     * @returns {ManagerScreen}
     */
    this.replace = function(index, search, value) {
        var line = this.getLine(index);
        value = this.cleanValue(value);
        var str = Tools.strip_tag(line.getContent().toString());

        var content = str.replace(search, value);
        line.setContent(content);
        this.redrawLine(index);
        return this;
    };
    /**
     * @param index
     * @param value
     * @param start
     * @param end
     * @returns {ManagerScreen}
     */
    this.replaceCharAt = function(index, value, start, end) {

        if(end === undefined || end === null) {
            end = start+value.length;
        }

        var line = this.getLine(index);
        value = this.cleanValue(value);

        var str = line.getContent().toString();
        str = Tools.strip_tag(str);

        var content = str.substring(0, start)+value+str.substring(end);
        line.setContent(content);
        this.redrawLine(index);
        return this;
    };

    /**
     * @param value
     * @returns string
     */
    this.cleanValue = function(value) {
        if (value instanceof jQuery) {
            return $('<div/>').append(value).html();
        }
        return value;
    };

    return this.init();
};
var ModelLine = function() {

    this.content = null;
    /**
     * @returns {ModelLine}
     */
    this.init = function() {
        return this;
    };
    /**
     * @param content
     * @returns {ModelLine}
     */
    this.setContent = function(content) {
        this.content = content;
        return this;
    };
    /**
     * @returns {null|string}
     */
    this.getContent = function() {
        return this.content;
    };

    return this.init();
};
var ModelScenario = function() {

    /**
     * @var {Array}
     */
    this.actions = [];

    /**
     * @returns {ModelScenario}
     */
    this.init = function() {
        return this;
    };

    /**
     * @param action
     * @returns {ModelScenario}
     */
    this.addAction = function(action) {
        this.actions.push(action);
        return this;
    };
    /**
     * @param index
     * @returns {ModelScenario}
     */
    this.removeAction = function(index) {
        this.actions.splice(index);
        return this;
    };
    /**
     * @returns Array
     */
    this.getActions = function() {
        return this.actions;
    };
    /**
     * @returns {ModelScenario}
     */
    this.clear = function() {
        this.actions = [];
        return this;
    };

    return this.init();
};
var ModelScreen = function() {

    this.lines = [];

    /**
     * @returns {ModelScreen}
     */
    this.init = function() {
        return this;
    };
    /**
     * @param line ModelLine
     * @returns {ModelScreen}
     */
    this.addLine = function(line) {
        this.lines.push(line);
        return this;
    };
    /**
     * @param index
     * @returns {ModelScreen}
     */
    this.removeLine = function(index) {
        this.lines.splice(index);
        return this;
    };
    /**
     * @returns ModelLine[]
     */
    this.getLines = function() {
        return this.lines;
    };
    /**
     * @returns {ModelScreen}
     */
    this.clear = function() {
        this.lines = [];
        return this;
    };

    return this.init();
};
var KeyboardEffect = function() {

    /**
     * @returns {KeyboardEffect}
     */
    this.init = function() {
        return this;
    };

    this.type = function(text, duration, func) {
        var t = Math.floor(
            Math.floor(duration/(text.length)+1)
        );

        var cache = '';
        var count = 0;
        var extraT = 0;

        for (var i = 0; i < text.length; i++) {
            var rand = Math.floor((Math.random() * 100) + 1)/100;
            var m = t + extraT;
            extraT = (t*rand);
            m = t - extraT;

            setTimeout(
                function(i) {
                    var cursor = new UiGraphicCursor().getChar();

                    cache += text[i];
                    func(cache+cursor);
                },
                count,
                i
            );
            count = count+m;
        }
    };
    return this.init();
};
var RandomEffect = function() {

    /**
     * @returns {RandomEffect}
     */
    this.init = function() {
        return this;
    };

    this.randomize = function(text, duration, list, func) {
        var t = Math.floor(
            Math.floor(duration/(text.length)+1) / (list.length+1)
        );

        var cache = '';
        var count = 0;
        for (var i = 0; i < text.length; i++) {
            for (var j = 0; j < list.length; j++) {
                count = count+t;

                setTimeout(
                    function(j) {
                        func(cache + list[j]);
                    },
                    count,
                    j
                );
            }
            count = count+t;

            setTimeout(
                function(i) {
                    cache += text[i];
                    func(cache);
                },
                count,
                i
            );
        }
    };
    return this.init();
};
var UiGraphicCursor = function() {

    /**
     * @var {*|jQuery}
     */
    this.elm = null;

    /**
     * @returns {UiGraphicCursor}
     */
    this.init = function() {
        return this;
    };

    /**
     * @returns {string}
     */
    this.getChar = function () {
        return '¬';
    };

    /**
     * @returns {*|jQuery}
     */
    this.getElm = function() {
        this.elm = $('<span/>').addClass('line-cursor').append('|');
        return this.elm;
    };

    /**
     * @returns {*}
     */
    this.html = function() {
        var div = $('<div/>');
        return div.append(this.getElm()).html();
    };

    return this.init();
};
var UiGraphicLine = function(line) {

    /**
     * @var ModelLine
     */
    this.model = line;

    /**
     * @returns {UiGraphicLine}
     */
    this.init = function() {
        return this;
    };

    /**
     * @returns {*|jQuery}
     */
    this.getElm = function() {
        var div = $('<div/>').addClass('line');
        var content = this.model.getContent();
        var cursor = new UiGraphicCursor();

        if (content) {
            content = content.replace(cursor.getChar(), cursor.html());
        }

        return div.html(content);
    };

    return this.init();
};
var UiGraphicScreen = function(elm, config) {

    /**
     * @var jQuery
     */
    this.$elm = elm;

    /**
     * @var Config
     */
    this.config = config;

    /**
     * @returns {UiGraphicScreen}
     */
    this.init = function() {
        this.$elm.css({
            backgroundColor: this.config.options.color.brown,
            color: this.config.options.color.white
        })
        .addClass('screen-on-playing');
        return this;
    };

    return this.init();
};